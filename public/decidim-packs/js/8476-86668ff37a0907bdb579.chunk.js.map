{"version":3,"file":"js/8476-86668ff37a0907bdb579.chunk.js","mappings":"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","sources":["webpack://decidim-base/./node_modules/@graphiql/react/dist/mode.es.js","webpack://decidim-base/./node_modules/@graphiql/react/dist/onlineParser.es.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { C as CodeMirror } from \"./codemirror.es.js\";\nimport \"graphql\";\nimport { i as isIgnored, L as LexRules, P as ParseRules } from \"./index.es.js\";\nimport { o as onlineParser } from \"./onlineParser.es.js\";\nimport \"react\";\nimport \"react-dom\";\nfunction indent(state, textAfter) {\n  var _a, _b;\n  const levels = state.levels;\n  const level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n  return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n__name(indent, \"indent\");\nconst graphqlModeFactory = /* @__PURE__ */ __name((config) => {\n  const parser = onlineParser({\n    eatWhitespace: (stream) => stream.eatWhile(isIgnored),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: { tabSize: config.tabSize }\n  });\n  return {\n    config,\n    startState: parser.startState,\n    token: parser.token,\n    indent,\n    electricInput: /^\\s*[})\\]]/,\n    fold: \"brace\",\n    lineComment: \"#\",\n    closeBrackets: {\n      pairs: '()[]{}\"\"',\n      explode: \"()[]{}\"\n    }\n  };\n}, \"graphqlModeFactory\");\nCodeMirror.defineMode(\"graphql\", graphqlModeFactory);\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { i as isIgnored, L as LexRules, P as ParseRules } from \"./index.es.js\";\nimport { Kind } from \"graphql\";\nfunction onlineParser(options = {\n  eatWhitespace: (stream) => stream.eatWhile(isIgnored),\n  lexRules: LexRules,\n  parseRules: ParseRules,\n  editorConfig: {}\n}) {\n  return {\n    startState() {\n      const initialState = {\n        level: 0,\n        step: 0,\n        name: null,\n        kind: null,\n        type: null,\n        rule: null,\n        needsSeparator: false,\n        prevState: null\n      };\n      pushRule(options.parseRules, initialState, Kind.DOCUMENT);\n      return initialState;\n    },\n    token(stream, state) {\n      return getToken(stream, state, options);\n    }\n  };\n}\n__name(onlineParser, \"onlineParser\");\nfunction getToken(stream, state, options) {\n  var _a;\n  if (state.inBlockstring) {\n    if (stream.match(/.*\"\"\"/)) {\n      state.inBlockstring = false;\n      return \"string\";\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n  const { lexRules, parseRules, eatWhitespace, editorConfig } = options;\n  if (state.rule && state.rule.length === 0) {\n    popRule(state);\n  } else if (state.needsAdvance) {\n    state.needsAdvance = false;\n    advanceRule(state, true);\n  }\n  if (stream.sol()) {\n    const tabSize = (editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.tabSize) || 2;\n    state.indentLevel = Math.floor(stream.indentation() / tabSize);\n  }\n  if (eatWhitespace(stream)) {\n    return \"ws\";\n  }\n  const token = lex(lexRules, stream);\n  if (!token) {\n    const matchedSomething = stream.match(/\\S+/);\n    if (!matchedSomething) {\n      stream.match(/\\s/);\n    }\n    pushRule(SpecialParseRules, state, \"Invalid\");\n    return \"invalidchar\";\n  }\n  if (token.kind === \"Comment\") {\n    pushRule(SpecialParseRules, state, \"Comment\");\n    return \"comment\";\n  }\n  const backupState = assign({}, state);\n  if (token.kind === \"Punctuation\") {\n    if (/^[{([]/.test(token.value)) {\n      if (state.indentLevel !== void 0) {\n        state.levels = (state.levels || []).concat(state.indentLevel + 1);\n      }\n    } else if (/^[})\\]]/.test(token.value)) {\n      const levels = state.levels = (state.levels || []).slice(0, -1);\n      if (state.indentLevel) {\n        if (levels.length > 0 && levels[levels.length - 1] < state.indentLevel) {\n          state.indentLevel = levels[levels.length - 1];\n        }\n      }\n    }\n  }\n  while (state.rule) {\n    let expected = typeof state.rule === \"function\" ? state.step === 0 ? state.rule(token, stream) : null : state.rule[state.step];\n    if (state.needsSeparator) {\n      expected = expected === null || expected === void 0 ? void 0 : expected.separator;\n    }\n    if (expected) {\n      if (expected.ofRule) {\n        expected = expected.ofRule;\n      }\n      if (typeof expected === \"string\") {\n        pushRule(parseRules, state, expected);\n        continue;\n      }\n      if ((_a = expected.match) === null || _a === void 0 ? void 0 : _a.call(expected, token)) {\n        if (expected.update) {\n          expected.update(state, token);\n        }\n        if (token.kind === \"Punctuation\") {\n          advanceRule(state, true);\n        } else {\n          state.needsAdvance = true;\n        }\n        return expected.style;\n      }\n    }\n    unsuccessful(state);\n  }\n  assign(state, backupState);\n  pushRule(SpecialParseRules, state, \"Invalid\");\n  return \"invalidchar\";\n}\n__name(getToken, \"getToken\");\nfunction assign(to, from) {\n  const keys = Object.keys(from);\n  for (let i = 0; i < keys.length; i++) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n__name(assign, \"assign\");\nconst SpecialParseRules = {\n  Invalid: [],\n  Comment: []\n};\nfunction pushRule(rules, state, ruleKind) {\n  if (!rules[ruleKind]) {\n    throw new TypeError(\"Unknown rule: \" + ruleKind);\n  }\n  state.prevState = Object.assign({}, state);\n  state.kind = ruleKind;\n  state.name = null;\n  state.type = null;\n  state.rule = rules[ruleKind];\n  state.step = 0;\n  state.needsSeparator = false;\n}\n__name(pushRule, \"pushRule\");\nfunction popRule(state) {\n  if (!state.prevState) {\n    return;\n  }\n  state.kind = state.prevState.kind;\n  state.name = state.prevState.name;\n  state.type = state.prevState.type;\n  state.rule = state.prevState.rule;\n  state.step = state.prevState.step;\n  state.needsSeparator = state.prevState.needsSeparator;\n  state.prevState = state.prevState.prevState;\n}\n__name(popRule, \"popRule\");\nfunction advanceRule(state, successful) {\n  var _a;\n  if (isList(state) && state.rule) {\n    const step = state.rule[state.step];\n    if (step.separator) {\n      const separator = step.separator;\n      state.needsSeparator = !state.needsSeparator;\n      if (!state.needsSeparator && separator.ofRule) {\n        return;\n      }\n    }\n    if (successful) {\n      return;\n    }\n  }\n  state.needsSeparator = false;\n  state.step++;\n  while (state.rule && !(Array.isArray(state.rule) && state.step < state.rule.length)) {\n    popRule(state);\n    if (state.rule) {\n      if (isList(state)) {\n        if ((_a = state.rule) === null || _a === void 0 ? void 0 : _a[state.step].separator) {\n          state.needsSeparator = !state.needsSeparator;\n        }\n      } else {\n        state.needsSeparator = false;\n        state.step++;\n      }\n    }\n  }\n}\n__name(advanceRule, \"advanceRule\");\nfunction isList(state) {\n  const step = Array.isArray(state.rule) && typeof state.rule[state.step] !== \"string\" && state.rule[state.step];\n  return step && step.isList;\n}\n__name(isList, \"isList\");\nfunction unsuccessful(state) {\n  while (state.rule && !(Array.isArray(state.rule) && state.rule[state.step].ofRule)) {\n    popRule(state);\n  }\n  if (state.rule) {\n    advanceRule(state, false);\n  }\n}\n__name(unsuccessful, \"unsuccessful\");\nfunction lex(lexRules, stream) {\n  const kinds = Object.keys(lexRules);\n  for (let i = 0; i < kinds.length; i++) {\n    const match = stream.match(lexRules[kinds[i]]);\n    if (match && match instanceof Array) {\n      return { kind: kinds[i], value: match[0] };\n    }\n  }\n}\n__name(lex, \"lex\");\nexport { onlineParser as o };\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","indent","state","textAfter","_a","_b","levels","length","this","electricInput","test","indentLevel","config","indentUnit","graphqlModeFactory","parser","onlineParser","eatWhitespace","stream","eatWhile","isIgnored","lexRules","LexRules","parseRules","ParseRules","editorConfig","tabSize","startState","token","fold","lineComment","closeBrackets","pairs","explode","CodeMirror","defineMode","options","arguments","undefined","initialState","level","step","name","kind","type","rule","needsSeparator","prevState","pushRule","Kind","DOCUMENT","getToken","inBlockstring","match","skipToEnd","popRule","needsAdvance","advanceRule","sol","Math","floor","indentation","lex","SpecialParseRules","backupState","assign","concat","slice","expected","separator","ofRule","call","update","style","unsuccessful","to","from","keys","i","Invalid","Comment","rules","ruleKind","TypeError","successful","isList","Array","isArray","kinds"],"sourceRoot":""}