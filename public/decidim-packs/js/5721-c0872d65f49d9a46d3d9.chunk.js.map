{"version":3,"file":"js/5721-c0872d65f49d9a46d3d9.chunk.js","mappings":"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","sources":["webpack://decidim-base/./node_modules/@decidim/voting_schemes-dummy/src/voter_wrapper.js","webpack://decidim-base/./node_modules/@decidim/voting_schemes-dummy/src/voter_wrapper_adapter.js","webpack://decidim-base/./node_modules/@decidim/voting_schemes-electionguard/src/voter_wrapper_adapter.js","webpack://decidim-base/../.rbenv/versions/3.1.1/lib/ruby/gems/3.1.0/gems/decidim-elections-0.28.0/app/packs/src/decidim/elections/voter/setup-vote.js"],"sourcesContent":["export const CREATE_ELECTION = \"create_election\";\nexport const END_KEY_CEREMONY = \"end_key_ceremony\";\n\n/**\n * This is just a dummy implementation of a possible `VoterWrapper`.\n * It is based on the dummy voting schema that we are using in the Bulletin Board.\n */\n\nexport const WAIT_TIME_MS = 500; // 0.5s\n\nexport class VoterWrapper {\n  constructor({ voterId, waitTime }) {\n    this.voterId = voterId;\n    this.jointElectionKey = null;\n    this.contests = {};\n    this.waitTime = waitTime ?? WAIT_TIME_MS;\n  }\n\n  /**\n   * Process the message and update the wrapper status.\n   *\n   * @param {String} messageType - The message type.\n   * @param {Object} decodedData - An object with the data to process.\n   *\n   * @returns {undefined}\n   */\n  processMessage(messageType, decodedData) {\n    switch (messageType) {\n      case CREATE_ELECTION: {\n        this.contests = decodedData.description.contests;\n        break;\n      }\n      case END_KEY_CEREMONY: {\n        const content = JSON.parse(decodedData.content);\n        this.jointElectionKey = content.joint_election_key;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Converts the given vote into an auditable ballot and an encrypted Ballot. As the process is very fast,\n   * it simulates the delay of the encryption process.\n   *\n   * @param {Object} plainVote - An object with the choosen answers for each question.\n   * @param {String} ballotStyle - The ballot style identifier.\n   *\n   * @private\n   * @returns {Promise<Object|undefined>}\n   */\n  async encrypt(plainVote, _ballotStyle) {\n    return new Promise((resolve) => setTimeout(resolve, WAIT_TIME_MS)).then(\n      () => {\n        if (!this.jointElectionKey) {\n          console.warn(\"Invalid election status.\");\n          return;\n        }\n\n        const auditableData = this.createAuditableBallot(plainVote);\n        const encryptedData = JSON.stringify(\n          this.createEncryptedData(JSON.parse(JSON.stringify(auditableData))),\n        );\n\n        return { auditableData, encryptedData };\n      },\n    );\n  }\n\n  /**\n   * Encrypts the given vote into an object with the format expected by the Dummy voting scheme,\n   * using the silly encryption defined by the scheme for each answer ((1|0) + random * jointElectionKey).\n   * Returns the auditable vote.\n   *\n   * @param {Object} vote - An object with the choosen answers for each question.\n   *\n   * @private\n   * @returns {<Object>}\n   */\n  createAuditableBallot(vote) {\n    /* eslint-disable camelcase */\n    return {\n      ballot_style: \"ballot-style\",\n      contests: this.contests.map(({ object_id, ballot_selections }) => {\n        return {\n          object_id,\n          ballot_selections: ballot_selections.map((ballotSelection) => {\n            const random = Math.random();\n            const plaintext =\n              vote[object_id] &&\n              vote[object_id].includes(ballotSelection.object_id)\n                ? 1\n                : 0;\n\n            return {\n              object_id: ballotSelection.object_id,\n              ciphertext:\n                plaintext +\n                Math.floor(random * 500 + 1) * this.jointElectionKey,\n              random,\n              plaintext,\n            };\n          }),\n        };\n      }),\n    };\n    /* eslint-enable camelcase */\n  }\n\n  /**\n   * Creates an encrypted data.\n   *\n   * @param {Object} vote - An object with the encrypted vote.\n   *\n   * @private\n   * @returns {<Object>}\n   */\n  createEncryptedData(vote) {\n    const encryptedBallot = this.removeAuditInformation(vote);\n    return encryptedBallot;\n  }\n\n  /**\n   * Removes the 'random' and 'plaintext' fields from the auditable ballot.\n   *\n   * @param {Object} ballot - An auditable ballot.\n   *\n   * @private\n   * @returns {<Object>}\n   */\n  removeAuditInformation(ballot) {\n    /* eslint-disable camelcase */\n    ballot.contests.map((contest) => {\n      return contest.ballot_selections.map((ballot_selection) => {\n        delete ballot_selection.random;\n        delete ballot_selection.plaintext;\n\n        return ballot_selection;\n      });\n    });\n\n    return ballot;\n    /* eslint-enable camelcase */\n  }\n}\n","import { VoterWrapper } from \"./voter_wrapper\";\n\n/**\n * This is just a dummy implementation of a possible `VoterWrapperAdapter`.\n * It is based on the dummy voting scheme that we are using in the Bulletin Board.\n */\nexport class VoterWrapperAdapter {\n  /**\n   * Initializes the class with the given params.\n   *\n   * @constructor\n   * @param {Object} params - An object that contains the initialization params.\n   * - {String} voterId - The unique id of a trustee.\n   * - {String} waitTime - The time to wait to simulate the real encryption time.\n   * -\n   */\n  constructor({ voterId, waitTime }) {\n    this.voterId = voterId;\n    this.wrapper = new VoterWrapper({ voterId, waitTime });\n  }\n\n  /**\n   * Setup the voter wrapper.\n   *\n   * @returns {Promise<undefined>}\n   */\n  setup() {}\n\n  /**\n   * Processes the message and updates the wrapper status.\n   *\n   * @param {String} messageType - The message type.\n   * @param {Object} decodedData - An object with the data to process.\n   *\n   * @returns {Promise<Object|undefined>}\n   */\n  processMessage(messageType, decodedData) {\n    return this.wrapper.processMessage(messageType, decodedData);\n  }\n\n  /**\n   * Encrypts the plain vote using the wrapper and returns an object with the\n   * encrypted data and the auditable data known as ballot.\n   *\n   * @param {Object} plainVote - An object with the choosen answers for each question.\n   * @param {String} ballotStyle - The ballot style identifier.\n   *\n   * @private\n   * @returns {Promise<Object|undefined>}\n   */\n  encrypt(plainVote, ballotStyle) {\n    return this.wrapper.encrypt(plainVote, ballotStyle);\n  }\n}\n","import { WrapperAdapter } from \"./wrapper_adapter\";\n\n/**\n * This implements the Electionguard Voter Wrapper Adapter using a web worker\n * that executes python code compiled through `pyodide`.\n * @extends WrapperAdapter\n */\nexport class VoterWrapperAdapter extends WrapperAdapter {\n  /**\n   * Initializes the class with the given params.\n   *\n   * @constructor\n   * @param {Object} params - An object that contains the initialization params.\n   * - {String} voterId - The unique id of a voter.\n   */\n  constructor({ voterId, workerUrl }) {\n    super();\n\n    this.voterId = voterId;\n    this.worker = new Worker(workerUrl);\n  }\n\n  /**\n   * Setup the voter wrapper.\n   *\n   * @returns {Promise<undefined>}\n   */\n  async setup() {\n    return await this.processPythonCodeOnWorker(\n      `\n        from js import voter_id\n        from bulletin_board.electionguard.voter import Voter\n        voter = Voter(voter_id)\n      `,\n      {\n        voter_id: this.voterId,\n      },\n    );\n  }\n\n  /**\n   * Process the message and update the wrapper status.\n   *\n   * @param {String} messageType - The message type.\n   * @param {Object} decodedData - An object with the data to process.\n   *\n   * @returns {Promise<Object|undefined>}\n   */\n  async processMessage(messageType, decodedData) {\n    const result = await this.processPythonCodeOnWorker(\n      `\n      from js import message_type, decoded_data\n      import json\n      voter.process_message(message_type, json.loads(decoded_data))\n    `,\n      {\n        message_type: messageType,\n        decoded_data: JSON.stringify(decodedData),\n      },\n    );\n\n    if (result && result.length > 0) {\n      // Pyodide 0.17 return a Map instead of a object when python is a dict\n      // eslint-disable-next-line camelcase\n      const { message_type, content } =\n        result[0] instanceof Map ? Object.fromEntries(result[0]) : result[0];\n      return {\n        messageType: message_type,\n        content: content,\n      };\n    }\n  }\n\n  /**\n   * Encrypts the plain vote using the wrapper and returns an object with the\n   * encrypted data and the auditable data known as ballot.\n   *\n   * @param {Object} plainVote - An object with the choosen answers for each question.\n   * @param {String} ballotStyle - The ballot style identifier.\n   *\n   * @private\n   * @returns {Promise<Object|undefined>}\n   */\n  async encrypt(plainVote, ballotStyle) {\n    const [auditableData, encryptedData] = await this.processPythonCodeOnWorker(\n      `\n      from js import plain_vote, ballot_style\n      voter.encrypt(plain_vote.to_py(), ballot_style)\n    `,\n      {\n        plain_vote: plainVote,\n        ballot_style: ballotStyle,\n      },\n    );\n    return { auditableData, encryptedData };\n  }\n}\n","/* eslint-disable require-jsdoc */\n\n// show a message to the user if comunication is lost\nimport \"src/decidim/elections/broken_promises_handler\";\nimport { VoteComponent } from \"@decidim/decidim-bulletin_board\";\n\nimport * as VotingSchemesDummy from \"@decidim/voting_schemes-dummy\";\nconst DummyVoterWrapperAdapter = VotingSchemesDummy.VoterWrapperAdapter;\nimport * as VotingSchemesElectionGuard from \"@decidim/voting_schemes-electionguard\";\nconst ElectionGuardVoterWrapperAdapter =\n  VotingSchemesElectionGuard.VoterWrapperAdapter;\n\nexport default function setupVoteComponent($voteWrapper) {\n  // Data\n  const bulletinBoardClientParams = {\n    apiEndpointUrl: $voteWrapper.data(\"apiEndpointUrl\")\n  };\n  const electionUniqueId = $voteWrapper.data(\"electionUniqueId\");\n  const authorityPublicKeyJSON = JSON.stringify(\n    $voteWrapper.data(\"authorityPublicKey\")\n  );\n  const voterUniqueId = $voteWrapper.data(\"voterId\");\n  const schemeName = $voteWrapper.data(\"schemeName\");\n\n  // Use the correct voter wrapper adapter\n  let voterWrapperAdapter = null;\n\n  if (schemeName === \"dummy\") {\n    voterWrapperAdapter = new DummyVoterWrapperAdapter({\n      voterId: voterUniqueId\n    });\n  } else if (schemeName === \"electionguard\") {\n    voterWrapperAdapter = new ElectionGuardVoterWrapperAdapter({\n      voterId: voterUniqueId,\n      workerUrl: \"/assets/electionguard/webworker.js\"\n    });\n  } else {\n    throw new Error(`Voting scheme ${schemeName} not supported.`);\n  }\n\n  // Returns the vote component\n  return new VoteComponent({\n    bulletinBoardClientParams,\n    authorityPublicKeyJSON,\n    electionUniqueId,\n    voterUniqueId,\n    voterWrapperAdapter\n  });\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_defineProperties","target","props","descriptor","_toPropertyKey","toPrimitive","String","Number","_toPrimitive","VoterWrapper","_ref","voterId","waitTime","instance","Constructor","_classCallCheck","this","jointElectionKey","contests","protoProps","staticProps","fn","_encrypt","messageType","decodedData","description","content","JSON","parse","joint_election_key","_callee","plainVote","_ballotStyle","_this","_context","setTimeout","auditableData","createAuditableBallot","encryptedData","stringify","createEncryptedData","console","warn","self","args","arguments","apply","err","undefined","_x","_x2","vote","_this2","ballot_style","map","_ref2","object_id","ballot_selections","ballotSelection","random","Math","plaintext","includes","ciphertext","floor","removeAuditInformation","ballot","contest","ballot_selection","VoterWrapperAdapter","wrapper","processMessage","ballotStyle","encrypt","_asyncToGenerator","_callSuper","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","bind","_setPrototypeOf","_WrapperAdapter","workerUrl","worker","Worker","_processMessage","_setup","subClass","superClass","_inherits","processPythonCodeOnWorker","voter_id","_callee2","result","message_type","_context2","decoded_data","Map","fromEntries","_callee3","_yield$this$processPy","_yield$this$processPy2","_context3","plain_vote","_slicedToArray","_x3","_x4","WrapperAdapter","DummyVoterWrapperAdapter","VotingSchemesDummy","ElectionGuardVoterWrapperAdapter","VotingSchemesElectionGuard","setupVoteComponent","$voteWrapper","bulletinBoardClientParams","apiEndpointUrl","data","electionUniqueId","authorityPublicKeyJSON","voterUniqueId","schemeName","voterWrapperAdapter","concat","VoteComponent"],"sourceRoot":""}