/*!*********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[4].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[4].use[2]!./node_modules/@decidim/webpacker/src/loaders/decidim-sass-loader.js!./gems/decidim-module-core/app/packs/stylesheets/decidim/editor.scss ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************/
.editor-props {
  --editor-active-color: #487bda;
  --editor-border-color: #ccc;
  --editor-disabled-color: #eee;
  --editor-bubble-border-color: #ccc;
  --editor-bubble-shadow-color: #333;
}

.editor-suggestions-props {
  --editor-suggestions-border-color: #000;
  --editor-suggestions-background-color: #fff;
  --editor-suggestions-selected-highlight-color: #c7c7c7;
}

.editor-active {
  outline-style: solid;
  outline-width: 4px;
  outline-color: var(--editor-active-color);
}

.editor-border {
  border-style: solid;
  --tw-border-opacity: 1;
  border-color: rgb(204 204 204 / 1);
}

@supports (color: rgb(0 0 0 / 0)) {
.editor-border {
    border-color: rgb(204 204 204 / var(--tw-border-opacity));
  }
}

.editor-container {
  margin-bottom: 1.5rem;
  display: flex;
  flex-direction: column;
  border-width: 1px;
  --editor-active-color: #487bda;
  --editor-border-color: #ccc;
  --editor-disabled-color: #eee;
  --editor-bubble-border-color: #ccc;
  --editor-bubble-shadow-color: #333;
  --editor-suggestions-border-color: #000;
  --editor-suggestions-background-color: #fff;
  --editor-suggestions-selected-highlight-color: #c7c7c7;
  border-style: solid;
  --tw-border-opacity: 1;
  border-color: rgb(204 204 204 / 1);
}

@supports (color: rgb(0 0 0 / 0)) {
.editor-container {
  border-color: rgb(204 204 204 / var(--tw-border-opacity));
  }
}

.editor-container.editor-disabled .editor-input .ProseMirror {
  background-color: var(--editor-disabled-color);
}

.editor-container .editor-toolbar {
  border-width: 0px;
  border-bottom-width: 1px;
  padding-top: 0.375rem;
  padding-bottom: 0.375rem;
  padding-left: 0.625rem;
  padding-right: 0.625rem;
  border-style: solid;
  --tw-border-opacity: 1;
  border-color: rgb(204 204 204 / 1);
}

@supports (color: rgb(0 0 0 / 0)) {
.editor-container .editor-toolbar {
    border-color: rgb(204 204 204 / var(--tw-border-opacity));
  }
}

.editor-container .editor-toolbar .editor-toolbar-group {
  margin-left: 0.625rem;
  margin-right: 0.625rem;
  display: inline-block;
}

.editor-container .editor-toolbar .editor-toolbar-group:first-child {
  margin-left: 0px;
}

.editor-container .editor-toolbar .editor-toolbar-control {
  margin-left: 0.5rem;
  margin-top: 0px;
}

.editor-container .editor-toolbar .editor-toolbar-control:first-child {
  margin-left: 0px;
}

.editor-container .editor-toolbar .editor-toolbar-control.active svg, .editor-container .editor-toolbar .editor-toolbar-control:hover svg, .editor-container .editor-toolbar .editor-toolbar-control:focus svg {
  fill: var(--editor-active-color);
}

.editor-container .editor-toolbar select {
  margin-bottom: 0px;
  display: inline-block;
  height: 2rem;
  width: auto;
  padding-top: 0px;
  padding-bottom: 0px;
}

.editor-container .editor-toolbar button {
  position: relative;
}

.editor-container .editor-toolbar .editor-toolbar-icon {
  height: 1.25rem;
  width: 1.25rem;
}

.editor-container .editor-input {
  position: relative;
  flex: 1 1 auto;
  overflow-y: auto;
}

.editor-container .editor-input [data-linkbubble] {
  border-width: 1px;
  border-style: solid;
  border-color: var(--editor-bubble-border-color);
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / 1);
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);
  box-shadow: 0 0 #0000, 0 0 #0000, 0 4px 6px -1px var(--editor-bubble-shadow-color), 0 2px 4px -2px var(--editor-bubble-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
  --tw-shadow-color: var(--editor-bubble-shadow-color);
  --tw-shadow: var(--tw-shadow-colored);
}

@supports (color: rgb(0 0 0 / 0)) {
.editor-container .editor-input [data-linkbubble] {
    background-color: rgb(255 255 255 / var(--tw-bg-opacity));
  }
}

.editor-container .editor-input [data-linkbubble] [data-linkbubble-content] {
  display: inline-flex;
}

.editor-container .editor-input [data-linkbubble] [data-linkbubble-content] [data-linkbubble-value] {
  margin-left: 0.5rem;
  max-width: 185px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.editor-container .editor-input [data-linkbubble] button {
  margin-left: 0.25rem;
  margin-right: 0.25rem;
  cursor: pointer;
  color: var(--editor-active-color);
}

.editor-container .editor-input .ProseMirror {
  color: var(--tw-prose-body);
  max-width: 65ch;
}

.editor-container .editor-input .ProseMirror :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.editor-container .editor-input .ProseMirror :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-lead);
  font-size: 1.25em;
  line-height: 1.6;
  margin-top: 1.2em;
  margin-bottom: 1.2em;
}

.editor-container .editor-input .ProseMirror :where(a):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-links);
  text-decoration: underline;
  font-weight: 500;
}

.editor-container .editor-input .ProseMirror :where(strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-bold);
  font-weight: 600;
}

.editor-container .editor-input .ProseMirror :where(a strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(blockquote strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(thead th strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: decimal;
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-left: 1.625em;
}

.editor-container .editor-input .ProseMirror :where(ol[type="A"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}

.editor-container .editor-input .ProseMirror :where(ol[type="a"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}

.editor-container .editor-input .ProseMirror :where(ol[type="A" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}

.editor-container .editor-input .ProseMirror :where(ol[type="a" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}

.editor-container .editor-input .ProseMirror :where(ol[type="I"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-roman;
}

.editor-container .editor-input .ProseMirror :where(ol[type="i"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-roman;
}

.editor-container .editor-input .ProseMirror :where(ol[type="I" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-roman;
}

.editor-container .editor-input .ProseMirror :where(ol[type="i" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-roman;
}

.editor-container .editor-input .ProseMirror :where(ol[type="1"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: decimal;
}

.editor-container .editor-input .ProseMirror :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: disc;
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-left: 1.625em;
}

.editor-container .editor-input .ProseMirror :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
  font-weight: 400;
  color: var(--tw-prose-counters);
}

.editor-container .editor-input .ProseMirror :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
  color: var(--tw-prose-bullets);
}

.editor-container .editor-input .ProseMirror :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  margin-top: 1.25em;
}

.editor-container .editor-input .ProseMirror :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-color: var(--tw-prose-hr);
  border-top-width: 1px;
  margin-top: 3em;
  margin-bottom: 3em;
}

.editor-container .editor-input .ProseMirror :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 500;
  font-style: italic;
  color: var(--tw-prose-quotes);
  border-left-width: 0.25rem;
  border-left-color: var(--tw-prose-quote-borders);
  quotes: "\201C""\201D""\2018""\2019";
  margin-top: 1.6em;
  margin-bottom: 1.6em;
  padding-left: 1em;
}

.editor-container .editor-input .ProseMirror :where(blockquote p:first-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
  content: open-quote;
}

.editor-container .editor-input .ProseMirror :where(blockquote p:last-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: close-quote;
}

.editor-container .editor-input .ProseMirror :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 800;
  font-size: 2.25em;
  margin-top: 0;
  margin-bottom: 0.8888889em;
  line-height: 1.1111111;
}

.editor-container .editor-input .ProseMirror :where(h1 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 900;
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 700;
  font-size: 1.5em;
  margin-top: 2em;
  margin-bottom: 1em;
  line-height: 1.3333333;
}

.editor-container .editor-input .ProseMirror :where(h2 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 800;
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  font-size: 1.25em;
  margin-top: 1.6em;
  margin-bottom: 0.6em;
  line-height: 1.6;
}

.editor-container .editor-input .ProseMirror :where(h3 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 700;
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
  line-height: 1.5;
}

.editor-container .editor-input .ProseMirror :where(h4 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 700;
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.editor-container .editor-input .ProseMirror :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  display: block;
  margin-top: 2em;
  margin-bottom: 2em;
}

.editor-container .editor-input .ProseMirror :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 500;
  font-family: inherit;
  color: var(--tw-prose-kbd);
  box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%), 0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);
  font-size: 0.875em;
  border-radius: 0.3125rem;
  padding-top: 0.1875em;
  padding-right: 0.375em;
  padding-bottom: 0.1875em;
  padding-left: 0.375em;
}

.editor-container .editor-input .ProseMirror :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-code);
  font-weight: 600;
  font-size: 0.875em;
}

.editor-container .editor-input .ProseMirror :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
  content: "`";
}

.editor-container .editor-input .ProseMirror :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: "`";
}

.editor-container .editor-input .ProseMirror :where(a code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(h1 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
  font-size: 0.875em;
}

.editor-container .editor-input .ProseMirror :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
  font-size: 0.9em;
}

.editor-container .editor-input .ProseMirror :where(h4 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(blockquote code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(thead th code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.editor-container .editor-input .ProseMirror :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-pre-code);
  background-color: var(--tw-prose-pre-bg);
  overflow-x: auto;
  font-weight: 400;
  font-size: 0.875em;
  line-height: 1.7142857;
  margin-top: 1.7142857em;
  margin-bottom: 1.7142857em;
  border-radius: 0.375rem;
  padding-top: 0.8571429em;
  padding-right: 1.1428571em;
  padding-bottom: 0.8571429em;
  padding-left: 1.1428571em;
}

.editor-container .editor-input .ProseMirror :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  background-color: transparent;
  border-width: 0;
  border-radius: 0;
  padding: 0;
  font-weight: inherit;
  color: inherit;
  font-size: inherit;
  font-family: inherit;
  line-height: inherit;
}

.editor-container .editor-input .ProseMirror :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
  content: none;
}

.editor-container .editor-input .ProseMirror :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: none;
}

.editor-container .editor-input .ProseMirror :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  width: 100%;
  table-layout: auto;
  text-align: left;
  margin-top: 2em;
  margin-bottom: 2em;
  font-size: 0.875em;
  line-height: 1.7142857;
}

.editor-container .editor-input .ProseMirror :where(thead):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-th-borders);
}

.editor-container .editor-input .ProseMirror :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  vertical-align: bottom;
  padding-right: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em;
}

.editor-container .editor-input .ProseMirror :where(tbody tr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-td-borders);
}

.editor-container .editor-input .ProseMirror :where(tbody tr:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 0;
}

.editor-container .editor-input .ProseMirror :where(tbody td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  vertical-align: baseline;
}

.editor-container .editor-input .ProseMirror :where(tfoot):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-top-width: 1px;
  border-top-color: var(--tw-prose-th-borders);
}

.editor-container .editor-input .ProseMirror :where(tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  vertical-align: top;
}

.editor-container .editor-input .ProseMirror :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.editor-container .editor-input .ProseMirror :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-captions);
  font-size: 0.875em;
  line-height: 1.4285714;
  margin-top: 0.8571429em;
}

.editor-container .editor-input .ProseMirror {
  --tw-prose-body: #374151;
  --tw-prose-headings: #111827;
  --tw-prose-lead: #4b5563;
  --tw-prose-links: #111827;
  --tw-prose-bold: #111827;
  --tw-prose-counters: #6b7280;
  --tw-prose-bullets: #d1d5db;
  --tw-prose-hr: #e5e7eb;
  --tw-prose-quotes: #111827;
  --tw-prose-quote-borders: #e5e7eb;
  --tw-prose-captions: #6b7280;
  --tw-prose-kbd: #111827;
  --tw-prose-kbd-shadows: 17 24 39;
  --tw-prose-code: #111827;
  --tw-prose-pre-code: #e5e7eb;
  --tw-prose-pre-bg: #1f2937;
  --tw-prose-th-borders: #d1d5db;
  --tw-prose-td-borders: #e5e7eb;
  --tw-prose-invert-body: #d1d5db;
  --tw-prose-invert-headings: #fff;
  --tw-prose-invert-lead: #9ca3af;
  --tw-prose-invert-links: #fff;
  --tw-prose-invert-bold: #fff;
  --tw-prose-invert-counters: #9ca3af;
  --tw-prose-invert-bullets: #4b5563;
  --tw-prose-invert-hr: #374151;
  --tw-prose-invert-quotes: #f3f4f6;
  --tw-prose-invert-quote-borders: #374151;
  --tw-prose-invert-captions: #9ca3af;
  --tw-prose-invert-kbd: #fff;
  --tw-prose-invert-kbd-shadows: 255 255 255;
  --tw-prose-invert-code: #fff;
  --tw-prose-invert-pre-code: #d1d5db;
  --tw-prose-invert-pre-bg: rgb(0 0 0 / 50%);
  --tw-prose-invert-th-borders: #4b5563;
  --tw-prose-invert-td-borders: #374151;
  font-size: 1rem;
  line-height: 1.75;
}

.editor-container .editor-input .ProseMirror :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.editor-container .editor-input .ProseMirror :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.editor-container .editor-input .ProseMirror :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

.editor-container .editor-input .ProseMirror :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0.375em;
}

.editor-container .editor-input .ProseMirror :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0.375em;
}

.editor-container .editor-input .ProseMirror :where(.prose > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}

.editor-container .editor-input .ProseMirror :where(.prose > ul > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
}

.editor-container .editor-input .ProseMirror :where(.prose > ul > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-bottom: 1.25em;
}

.editor-container .editor-input .ProseMirror :where(.prose > ol > li > *:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
}

.editor-container .editor-input .ProseMirror :where(.prose > ol > li > *:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-bottom: 1.25em;
}

.editor-container .editor-input .ProseMirror :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}

.editor-container .editor-input .ProseMirror :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.editor-container .editor-input .ProseMirror :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.5em;
  padding-left: 1.625em;
}

.editor-container .editor-input .ProseMirror :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.editor-container .editor-input .ProseMirror :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.editor-container .editor-input .ProseMirror :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.editor-container .editor-input .ProseMirror :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.editor-container .editor-input .ProseMirror :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0;
}

.editor-container .editor-input .ProseMirror :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-right: 0;
}

.editor-container .editor-input .ProseMirror :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-top: 0.5714286em;
  padding-right: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em;
}

.editor-container .editor-input .ProseMirror :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0;
}

.editor-container .editor-input .ProseMirror :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-right: 0;
}

.editor-container .editor-input .ProseMirror :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.editor-container .editor-input .ProseMirror :where(.prose > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.editor-container .editor-input .ProseMirror :where(.prose > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-bottom: 0;
}

.editor-container .editor-input .ProseMirror {
  position: relative;
  min-height: 100%;
  max-width: none;
  padding: 0.625rem;
  outline-width: 0px;
}

.editor-container .editor-input .ProseMirror:first-child :is(:where(h1, h2, h3, h4, h5, h6, th):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  margin-top: 0px;
}

.editor-container .editor-input .ProseMirror:first-child :is(:where(p):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  margin-top: 0px;
}

.editor-container .editor-input .ProseMirror:first-child :is(:where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  margin-top: 0px;
}

.editor-container .editor-input .ProseMirror:first-child :is(:where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  margin-top: 0px;
}

.editor-container .editor-input .ProseMirror:first-child :is(:where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  margin-top: 0px;
}

.editor-container .editor-input .ProseMirror:first-child :is(:where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  margin-top: 0px;
}

.editor-container .editor-input .ProseMirror.ProseMirror-focused [data-video-embed].ProseMirror-selectednode, .editor-container .editor-input .ProseMirror.dialog-open [data-video-embed].ProseMirror-selectednode {
  outline-style: solid;
  outline-width: 4px;
  outline-color: var(--editor-active-color);
}

.editor-container .editor-input .ProseMirror.ProseMirror-focused [data-image-resizer].ProseMirror-selectednode [data-image-resizer-wrapper], .editor-container .editor-input .ProseMirror.dialog-open [data-image-resizer].ProseMirror-selectednode [data-image-resizer-wrapper] {
  outline-style: solid;
  outline-width: 4px;
  outline-color: var(--editor-active-color);
}

.editor-container .editor-input .ProseMirror.ProseMirror-focused [data-image-resizer].ProseMirror-selectednode [data-image-resizer-wrapper] [data-image-resizer-control],
.editor-container .editor-input .ProseMirror.ProseMirror-focused [data-image-resizer].ProseMirror-selectednode [data-image-resizer-wrapper] [data-image-resizer-dimensions], .editor-container .editor-input .ProseMirror.dialog-open [data-image-resizer].ProseMirror-selectednode [data-image-resizer-wrapper] [data-image-resizer-control],
.editor-container .editor-input .ProseMirror.dialog-open [data-image-resizer].ProseMirror-selectednode [data-image-resizer-wrapper] [data-image-resizer-dimensions] {
  display: block;
}

.editor-container .editor-input .ProseMirror[contenteditable=false] {
  cursor: not-allowed;
  background-color: var(--editor-disabled-color);
}

.editor-container .editor-input .ProseMirror .editor-content-image img {
  margin-top: 0px;
  margin-bottom: 0px;
}

.editor-container .editor-input .ProseMirror [data-video-embed] {
  margin-bottom: 2rem;
}

.editor-container .editor-input .ProseMirror [data-video-embed] iframe {
  pointer-events: none;
}

.editor-container .editor-input .ProseMirror [data-image-resizer] {
  margin-bottom: 2rem;
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] {
  position: relative;
  display: inline-block;
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control] {
  position: absolute;
  display: none;
  height: 0.625rem;
  width: 0.625rem;
  border-radius: 0px;
  border-width: 1px;
  border-style: solid;
  --tw-border-opacity: 1;
  border-color: rgb(0 0 0 / 1);
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / 1);
  opacity: 0.8;
}

@supports (color: rgb(0 0 0 / 0)) {
.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control] {
    border-color: rgb(0 0 0 / var(--tw-border-opacity));
    background-color: rgb(255 255 255 / var(--tw-bg-opacity));
  }
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control^=top-] {
  top: 0px;
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control^=bottom-] {
  bottom: 0px;
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control$=-left] {
  left: 0px;
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control$=-right] {
  right: 0px;
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control^=top-right],
.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control^=bottom-left] {
  cursor: nesw-resize;
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control^=top-left],
.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-control^=bottom-right] {
  cursor: nwse-resize;
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-dimensions] {
  position: absolute;
  bottom: 0.5rem;
  right: 0.75rem;
  display: none;
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / 1);
  padding: 0.25rem;
  font-size: 13px;
  line-height: 16px;
  opacity: 0.8;
}

@supports (color: rgb(0 0 0 / 0)) {
.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-dimensions] {
    background-color: rgb(255 255 255 / var(--tw-bg-opacity));
  }
}

.editor-container .editor-input .ProseMirror [data-image-resizer] [data-image-resizer-wrapper] [data-image-resizer-dimensions] [data-image-resizer-dimension]::after {
  content: attr(data-image-resizer-dimension-value);
}

.editor-container .editor-input .ProseMirror [data-suggestion] {
  border-radius: 0.375rem;
  border-width: 1px;
  border-style: solid;
  border-color: var(--editor-suggestions-border-color);
  padding-top: 0.125rem;
  padding-bottom: 0.125rem;
  padding-left: 0.25rem;
  padding-right: 0.25rem;
}

.editor-suggestions {
  border-width: 1px;
  border-style: solid;
  border-color: #000;
  border-color: var(--editor-suggestions-border-color);
  background-color: #fff;
  background-color: var(--editor-suggestions-background-color);
  --editor-suggestions-border-color: #000;
  --editor-suggestions-background-color: #fff;
  --editor-suggestions-selected-highlight-color: #c7c7c7;
}

.editor-suggestions:hover .editor-suggestions-item[data-selected]:not(:hover) {
  background-color: transparent;
}

.editor-suggestions .editor-suggestions-item {
  display: block;
  width: 100%;
  border-radius: 0px;
  border-width: 0px;
  border-top-width: 1px;
  border-style: solid;
  border-color: var(--editor-suggestions-border-color);
  padding-top: 0.625rem;
  padding-bottom: 0.625rem;
  padding-left: 0.375rem;
  padding-right: 0.375rem;
  text-align: left;
}

.editor-suggestions .editor-suggestions-item:first-child {
  border-top-width: 0px;
}

.editor-suggestions .editor-suggestions-item:hover, .editor-suggestions .editor-suggestions-item[data-selected] {
  background-color: var(--editor-suggestions-selected-highlight-color);
}

/*# sourceMappingURL=decidim_editor.css.map*/